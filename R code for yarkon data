#Script for Noam's PhD: load, tidy & plot Yarkon data#

# Import CRS data to R
<- function(filename,RetOpt="data"){
  if(RetOpt=="info"){
    # bring in entire header of CSI TOA5 data file for metadata
    stn.info <- scan(file=filename,nlines=4,what=character(),sep="\r")
    return(stn.info)
  } else {
    # second line of header contains variable names
    header <- scan(file=filename,skip=1,nlines=1,what=character(),sep=",")
    # bring in data
    stn.data <- read.table(file=filename,skip=4,header=FALSE, na.strings=c("NAN"),sep=",")
    names(stn.data) <- header
    # add column of R-formatted date/timestamps
    stn.data$TIMESTAMP <- as.POSIXlt(strptime(stn.data$TIMESTAMP,"%Y-%m-%d %H:%M:%S"))
    return(stn.data)}
}

## OR ##

#Import the Yarkon data (yd) into r
#clearing old data
#rm(list=ls())
#setwd("C:/Users/Anatoly Diatlov/Dropbox/Noam Yogev/Yarkon")
#yd <- read.csv("C:/Users/Anatoly Diatlov/Dropbox/Noam Yogev/YarkonYarkonData(2708).csv", row.names=NULL)  /  #data frame?  /  notice date change

## OR ##

#Import from excel .dat as table
#changeing date format
#Timestamp to POSIXlt or strptime()
    #strptime() converts character vectors to POSIXlt. In that sense, it is similar to as.POSIXlt(),
    #except that the input doesn't have to be in a particular format (YYYY-MM-DD).

#Tabel headers cleanup
#colnames(yd,"NO3 [mg/L]", "O %sat", "pH", "redox [mV]", "EC [us/cm]", "Chlorophyll [ug/L]", "cDOM [ppb]", "Turbidity [NTU]", "Level [m]", "CO2 [ppm]")

#ommiting NA's
rep.NA.last.val <- function(df, col.name) {
  num.rows <- nrow(df)
  for (i in 2:num.rows) {
    value <- df[i,col.name]
    if (is.na(value)) {
      df[i,col.name] <- df[i-1, col.name]
    }
  }
  
  return(df)
}

YarkonData <- rep.NA.last.val(YarkonData, "Level") #Apllay to entire table

#Interpolation
approxfun(x, y = NULL,       method="linear",
          yleft, yright, rule = 1, f = 0, ties = mean)

#daily ploting
#xyplot(time ~ all rows #| region,# data = state, layout = c(3,3))
#set.panel or par(mfrow = c(4,3))
plot(yd$Time, yd$NO3, xlab = "Time", ylab = "NO3 [mg/L]")
plot(yd$Time, yd$O2, xlab = "Time", ylab = "O2 [%sat]")
plot(yd$Time, yd$pH, xlab = "Time", ylab = "pH")
plot(yd$Time, yd$Chlorophyll, xlab = "Time", ylab = "Chlorophyll [ug/L]")
plot(yd$Time, yd$cDOM, xlab = "Time", ylab = "cDOM [ppb]")
plot(yd$Time, yd$Turbidity, xlab = "Time", ylab = "Turbidity [NTU]")
plot(yd$Time, yd$CO2, xlab = "Time", ylab = "CO2 [ppm]")
plot(yd$Time, yd$EC, xlab = "Time", ylab = "EC [us/cm]")
plot(yd$Time, yd$Temp, xlab = "Time", ylab = "Temp")
plot(yd$Time, yd$Level, xlab = "Time", ylab = "Level [m]")
plot(yd$Chlorophyll, yd$O2, xlab = "Chlorophyll", ylab = "O2")
plot(yd$cDOM, yd$O2, xlab = "cDOM", ylab = "O2")
#if needed par(mfrow = c(1,1))
#adding day & night backdrop
#Changing it from 2015-02-15 01:13:00 format to a number eg. 42050.05
ggplot() + geom_rect(data=tbdf, (aes(xmin=Date-0.5, xmax=Date+0.5, 
ymin=min(Ta)-0.5, ymax=max(Tb)+0.5, fill=factor(Light)))) +
scale_fill_manual(values=c("grey", "white"), guide=FALSE) +
geom_line(data = tbdf, aes(x = Date, y = Tb), size=0.8) +
geom_line(data = tbdf, aes(x = Date, y = Ta), colour='grey50', size=0.8)  +
ylab('Temperature (Â°C)')
qplot(displ, hwy, data = mpg)
#colors: consider using heat.colors() or topo.colors() from the grDevices package
#alpha (.3) in RGB (colorRamp() and colorRampPalette()) changes opecity & shows us where, specifically, the densest areas of the scatterplot really are
#smooth and trend lines in ggplot2 qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))  indicate the 95% confidence intervals for the lines.
#qplot(y = hwy, data = mpg, color = drv) specifying the y parameter only, without an x argument, plots the values of the y argument in the order in which they occur in the data
#Shiny

#other statistics and analysis
#saplly(data, range + mean)
#cor.mat <- cor(yd[,2:13])
#cor.mat.abs <- abs(cor.mat)
#cor.mat.abs > 0.7

#cottplot
#To compute the matrix of p-value, a custom R function is used :
# mat : is a matrix of data
# ... : further arguments to pass to the native R cor.test function
cor.mtest <- function(mat, ...) {
  mat <- as.matrix(mat)
  n <- ncol(mat)
  p.mat<- matrix(NA, n, n)
  diag(p.mat) <- 0
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      tmp <- cor.test(mat[, i], mat[, j], ...)
      p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
    }
  }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(mtcars)
head(p.mat[, 1:5])
#Add significance level to the correlogram
# Specialized the insignificant value according to the significant level
corrplot(M, type="upper", order="hclust", 
         p.mat = p.mat, sig.level = 0.01)
# Leave blank on no significant coefficient
corrplot(M, type="upper", order="hclust", 
         p.mat = p.mat, sig.level = 0.01, insig = "blank")
#Customize the correlogram
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(M, method="color", col=col(200),  
         type="upper", order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # Combine with significance
         p.mat = p.mat, sig.level = 0.01, insig = "blank", 
         # hide correlation coefficient on the principal diagonal
         diag=FALSE 
)

grid <- matrix(c(1, 1, 2, 3), nrow = 2, ncol = 2, byrow = TRUE)
layout(grid)
plot(yd$Time, yd$Chlorophyll, xlab = "Time", ylab = "Chlorophyll")
plot(yd$Time, yd$cDOM, xlab = "Time", ylab = "cDOM")
plot(yd$Time, yd$Turbidity, xlab = "Time", ylab = "Turbidity")
layout(1)
